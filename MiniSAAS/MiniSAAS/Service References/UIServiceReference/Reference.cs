//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.239
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 4.0.50826.0
// 
namespace MiniSAAS.UIServiceReference {
    using System.Runtime.Serialization;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ControlLocation", Namespace="http://schemas.datacontract.org/2004/07/MiniSAAS.Back.Classes")]
    public enum ControlLocation : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Header = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Footer = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Sidebar = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Body = 4,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Control", Namespace="http://schemas.datacontract.org/2004/07/MiniSAAS.Back.Classes")]
    public partial class Control : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string BackgroundImageField;
        
        private int ControlIDField;
        
        private MiniSAAS.UIServiceReference.ControlLocation ControlLocationField;
        
        private string RedirectURLField;
        
        private string TextField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string BackgroundImage {
            get {
                return this.BackgroundImageField;
            }
            set {
                if ((object.ReferenceEquals(this.BackgroundImageField, value) != true)) {
                    this.BackgroundImageField = value;
                    this.RaisePropertyChanged("BackgroundImage");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ControlID {
            get {
                return this.ControlIDField;
            }
            set {
                if ((this.ControlIDField.Equals(value) != true)) {
                    this.ControlIDField = value;
                    this.RaisePropertyChanged("ControlID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MiniSAAS.UIServiceReference.ControlLocation ControlLocation {
            get {
                return this.ControlLocationField;
            }
            set {
                if ((this.ControlLocationField.Equals(value) != true)) {
                    this.ControlLocationField = value;
                    this.RaisePropertyChanged("ControlLocation");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RedirectURL {
            get {
                return this.RedirectURLField;
            }
            set {
                if ((object.ReferenceEquals(this.RedirectURLField, value) != true)) {
                    this.RedirectURLField = value;
                    this.RaisePropertyChanged("RedirectURL");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Text {
            get {
                return this.TextField;
            }
            set {
                if ((object.ReferenceEquals(this.TextField, value) != true)) {
                    this.TextField = value;
                    this.RaisePropertyChanged("Text");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="UIServiceReference.IUIService")]
    public interface IUIService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUIService/GetControls", ReplyAction="http://tempuri.org/IUIService/GetControlsResponse")]
        System.IAsyncResult BeginGetControls(int orgid, MiniSAAS.UIServiceReference.ControlLocation controllocation, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<MiniSAAS.UIServiceReference.Control> EndGetControls(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUIService/UpdateHeader", ReplyAction="http://tempuri.org/IUIService/UpdateHeaderResponse")]
        System.IAsyncResult BeginUpdateHeader(int orgid, MiniSAAS.UIServiceReference.Control control, System.AsyncCallback callback, object asyncState);
        
        bool EndUpdateHeader(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUIService/AddLinks", ReplyAction="http://tempuri.org/IUIService/AddLinksResponse")]
        System.IAsyncResult BeginAddLinks(int orgid, MiniSAAS.UIServiceReference.Control control, System.AsyncCallback callback, object asyncState);
        
        bool EndAddLinks(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUIService/RemoveLinks", ReplyAction="http://tempuri.org/IUIService/RemoveLinksResponse")]
        System.IAsyncResult BeginRemoveLinks(int orgid, MiniSAAS.UIServiceReference.Control control, System.AsyncCallback callback, object asyncState);
        
        bool EndRemoveLinks(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUIService/AddPage", ReplyAction="http://tempuri.org/IUIService/AddPageResponse")]
        System.IAsyncResult BeginAddPage(int orgid, MiniSAAS.UIServiceReference.Control control, System.AsyncCallback callback, object asyncState);
        
        bool EndAddPage(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IUIService/RemovePage", ReplyAction="http://tempuri.org/IUIService/RemovePageResponse")]
        System.IAsyncResult BeginRemovePage(int orgid, MiniSAAS.UIServiceReference.Control control, System.AsyncCallback callback, object asyncState);
        
        bool EndRemovePage(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IUIServiceChannel : MiniSAAS.UIServiceReference.IUIService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetControlsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetControlsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<MiniSAAS.UIServiceReference.Control> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<MiniSAAS.UIServiceReference.Control>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UpdateHeaderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public UpdateHeaderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AddLinksCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AddLinksCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RemoveLinksCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RemoveLinksCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AddPageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AddPageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RemovePageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RemovePageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UIServiceClient : System.ServiceModel.ClientBase<MiniSAAS.UIServiceReference.IUIService>, MiniSAAS.UIServiceReference.IUIService {
        
        private BeginOperationDelegate onBeginGetControlsDelegate;
        
        private EndOperationDelegate onEndGetControlsDelegate;
        
        private System.Threading.SendOrPostCallback onGetControlsCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateHeaderDelegate;
        
        private EndOperationDelegate onEndUpdateHeaderDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateHeaderCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddLinksDelegate;
        
        private EndOperationDelegate onEndAddLinksDelegate;
        
        private System.Threading.SendOrPostCallback onAddLinksCompletedDelegate;
        
        private BeginOperationDelegate onBeginRemoveLinksDelegate;
        
        private EndOperationDelegate onEndRemoveLinksDelegate;
        
        private System.Threading.SendOrPostCallback onRemoveLinksCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddPageDelegate;
        
        private EndOperationDelegate onEndAddPageDelegate;
        
        private System.Threading.SendOrPostCallback onAddPageCompletedDelegate;
        
        private BeginOperationDelegate onBeginRemovePageDelegate;
        
        private EndOperationDelegate onEndRemovePageDelegate;
        
        private System.Threading.SendOrPostCallback onRemovePageCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public UIServiceClient() {
        }
        
        public UIServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public UIServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UIServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UIServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<GetControlsCompletedEventArgs> GetControlsCompleted;
        
        public event System.EventHandler<UpdateHeaderCompletedEventArgs> UpdateHeaderCompleted;
        
        public event System.EventHandler<AddLinksCompletedEventArgs> AddLinksCompleted;
        
        public event System.EventHandler<RemoveLinksCompletedEventArgs> RemoveLinksCompleted;
        
        public event System.EventHandler<AddPageCompletedEventArgs> AddPageCompleted;
        
        public event System.EventHandler<RemovePageCompletedEventArgs> RemovePageCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MiniSAAS.UIServiceReference.IUIService.BeginGetControls(int orgid, MiniSAAS.UIServiceReference.ControlLocation controllocation, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetControls(orgid, controllocation, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.Generic.List<MiniSAAS.UIServiceReference.Control> MiniSAAS.UIServiceReference.IUIService.EndGetControls(System.IAsyncResult result) {
            return base.Channel.EndGetControls(result);
        }
        
        private System.IAsyncResult OnBeginGetControls(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int orgid = ((int)(inValues[0]));
            MiniSAAS.UIServiceReference.ControlLocation controllocation = ((MiniSAAS.UIServiceReference.ControlLocation)(inValues[1]));
            return ((MiniSAAS.UIServiceReference.IUIService)(this)).BeginGetControls(orgid, controllocation, callback, asyncState);
        }
        
        private object[] OnEndGetControls(System.IAsyncResult result) {
            System.Collections.Generic.List<MiniSAAS.UIServiceReference.Control> retVal = ((MiniSAAS.UIServiceReference.IUIService)(this)).EndGetControls(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetControlsCompleted(object state) {
            if ((this.GetControlsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetControlsCompleted(this, new GetControlsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetControlsAsync(int orgid, MiniSAAS.UIServiceReference.ControlLocation controllocation) {
            this.GetControlsAsync(orgid, controllocation, null);
        }
        
        public void GetControlsAsync(int orgid, MiniSAAS.UIServiceReference.ControlLocation controllocation, object userState) {
            if ((this.onBeginGetControlsDelegate == null)) {
                this.onBeginGetControlsDelegate = new BeginOperationDelegate(this.OnBeginGetControls);
            }
            if ((this.onEndGetControlsDelegate == null)) {
                this.onEndGetControlsDelegate = new EndOperationDelegate(this.OnEndGetControls);
            }
            if ((this.onGetControlsCompletedDelegate == null)) {
                this.onGetControlsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetControlsCompleted);
            }
            base.InvokeAsync(this.onBeginGetControlsDelegate, new object[] {
                        orgid,
                        controllocation}, this.onEndGetControlsDelegate, this.onGetControlsCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MiniSAAS.UIServiceReference.IUIService.BeginUpdateHeader(int orgid, MiniSAAS.UIServiceReference.Control control, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdateHeader(orgid, control, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool MiniSAAS.UIServiceReference.IUIService.EndUpdateHeader(System.IAsyncResult result) {
            return base.Channel.EndUpdateHeader(result);
        }
        
        private System.IAsyncResult OnBeginUpdateHeader(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int orgid = ((int)(inValues[0]));
            MiniSAAS.UIServiceReference.Control control = ((MiniSAAS.UIServiceReference.Control)(inValues[1]));
            return ((MiniSAAS.UIServiceReference.IUIService)(this)).BeginUpdateHeader(orgid, control, callback, asyncState);
        }
        
        private object[] OnEndUpdateHeader(System.IAsyncResult result) {
            bool retVal = ((MiniSAAS.UIServiceReference.IUIService)(this)).EndUpdateHeader(result);
            return new object[] {
                    retVal};
        }
        
        private void OnUpdateHeaderCompleted(object state) {
            if ((this.UpdateHeaderCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateHeaderCompleted(this, new UpdateHeaderCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateHeaderAsync(int orgid, MiniSAAS.UIServiceReference.Control control) {
            this.UpdateHeaderAsync(orgid, control, null);
        }
        
        public void UpdateHeaderAsync(int orgid, MiniSAAS.UIServiceReference.Control control, object userState) {
            if ((this.onBeginUpdateHeaderDelegate == null)) {
                this.onBeginUpdateHeaderDelegate = new BeginOperationDelegate(this.OnBeginUpdateHeader);
            }
            if ((this.onEndUpdateHeaderDelegate == null)) {
                this.onEndUpdateHeaderDelegate = new EndOperationDelegate(this.OnEndUpdateHeader);
            }
            if ((this.onUpdateHeaderCompletedDelegate == null)) {
                this.onUpdateHeaderCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateHeaderCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateHeaderDelegate, new object[] {
                        orgid,
                        control}, this.onEndUpdateHeaderDelegate, this.onUpdateHeaderCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MiniSAAS.UIServiceReference.IUIService.BeginAddLinks(int orgid, MiniSAAS.UIServiceReference.Control control, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddLinks(orgid, control, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool MiniSAAS.UIServiceReference.IUIService.EndAddLinks(System.IAsyncResult result) {
            return base.Channel.EndAddLinks(result);
        }
        
        private System.IAsyncResult OnBeginAddLinks(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int orgid = ((int)(inValues[0]));
            MiniSAAS.UIServiceReference.Control control = ((MiniSAAS.UIServiceReference.Control)(inValues[1]));
            return ((MiniSAAS.UIServiceReference.IUIService)(this)).BeginAddLinks(orgid, control, callback, asyncState);
        }
        
        private object[] OnEndAddLinks(System.IAsyncResult result) {
            bool retVal = ((MiniSAAS.UIServiceReference.IUIService)(this)).EndAddLinks(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAddLinksCompleted(object state) {
            if ((this.AddLinksCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddLinksCompleted(this, new AddLinksCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddLinksAsync(int orgid, MiniSAAS.UIServiceReference.Control control) {
            this.AddLinksAsync(orgid, control, null);
        }
        
        public void AddLinksAsync(int orgid, MiniSAAS.UIServiceReference.Control control, object userState) {
            if ((this.onBeginAddLinksDelegate == null)) {
                this.onBeginAddLinksDelegate = new BeginOperationDelegate(this.OnBeginAddLinks);
            }
            if ((this.onEndAddLinksDelegate == null)) {
                this.onEndAddLinksDelegate = new EndOperationDelegate(this.OnEndAddLinks);
            }
            if ((this.onAddLinksCompletedDelegate == null)) {
                this.onAddLinksCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddLinksCompleted);
            }
            base.InvokeAsync(this.onBeginAddLinksDelegate, new object[] {
                        orgid,
                        control}, this.onEndAddLinksDelegate, this.onAddLinksCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MiniSAAS.UIServiceReference.IUIService.BeginRemoveLinks(int orgid, MiniSAAS.UIServiceReference.Control control, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRemoveLinks(orgid, control, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool MiniSAAS.UIServiceReference.IUIService.EndRemoveLinks(System.IAsyncResult result) {
            return base.Channel.EndRemoveLinks(result);
        }
        
        private System.IAsyncResult OnBeginRemoveLinks(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int orgid = ((int)(inValues[0]));
            MiniSAAS.UIServiceReference.Control control = ((MiniSAAS.UIServiceReference.Control)(inValues[1]));
            return ((MiniSAAS.UIServiceReference.IUIService)(this)).BeginRemoveLinks(orgid, control, callback, asyncState);
        }
        
        private object[] OnEndRemoveLinks(System.IAsyncResult result) {
            bool retVal = ((MiniSAAS.UIServiceReference.IUIService)(this)).EndRemoveLinks(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRemoveLinksCompleted(object state) {
            if ((this.RemoveLinksCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RemoveLinksCompleted(this, new RemoveLinksCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RemoveLinksAsync(int orgid, MiniSAAS.UIServiceReference.Control control) {
            this.RemoveLinksAsync(orgid, control, null);
        }
        
        public void RemoveLinksAsync(int orgid, MiniSAAS.UIServiceReference.Control control, object userState) {
            if ((this.onBeginRemoveLinksDelegate == null)) {
                this.onBeginRemoveLinksDelegate = new BeginOperationDelegate(this.OnBeginRemoveLinks);
            }
            if ((this.onEndRemoveLinksDelegate == null)) {
                this.onEndRemoveLinksDelegate = new EndOperationDelegate(this.OnEndRemoveLinks);
            }
            if ((this.onRemoveLinksCompletedDelegate == null)) {
                this.onRemoveLinksCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRemoveLinksCompleted);
            }
            base.InvokeAsync(this.onBeginRemoveLinksDelegate, new object[] {
                        orgid,
                        control}, this.onEndRemoveLinksDelegate, this.onRemoveLinksCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MiniSAAS.UIServiceReference.IUIService.BeginAddPage(int orgid, MiniSAAS.UIServiceReference.Control control, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddPage(orgid, control, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool MiniSAAS.UIServiceReference.IUIService.EndAddPage(System.IAsyncResult result) {
            return base.Channel.EndAddPage(result);
        }
        
        private System.IAsyncResult OnBeginAddPage(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int orgid = ((int)(inValues[0]));
            MiniSAAS.UIServiceReference.Control control = ((MiniSAAS.UIServiceReference.Control)(inValues[1]));
            return ((MiniSAAS.UIServiceReference.IUIService)(this)).BeginAddPage(orgid, control, callback, asyncState);
        }
        
        private object[] OnEndAddPage(System.IAsyncResult result) {
            bool retVal = ((MiniSAAS.UIServiceReference.IUIService)(this)).EndAddPage(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAddPageCompleted(object state) {
            if ((this.AddPageCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddPageCompleted(this, new AddPageCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddPageAsync(int orgid, MiniSAAS.UIServiceReference.Control control) {
            this.AddPageAsync(orgid, control, null);
        }
        
        public void AddPageAsync(int orgid, MiniSAAS.UIServiceReference.Control control, object userState) {
            if ((this.onBeginAddPageDelegate == null)) {
                this.onBeginAddPageDelegate = new BeginOperationDelegate(this.OnBeginAddPage);
            }
            if ((this.onEndAddPageDelegate == null)) {
                this.onEndAddPageDelegate = new EndOperationDelegate(this.OnEndAddPage);
            }
            if ((this.onAddPageCompletedDelegate == null)) {
                this.onAddPageCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddPageCompleted);
            }
            base.InvokeAsync(this.onBeginAddPageDelegate, new object[] {
                        orgid,
                        control}, this.onEndAddPageDelegate, this.onAddPageCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MiniSAAS.UIServiceReference.IUIService.BeginRemovePage(int orgid, MiniSAAS.UIServiceReference.Control control, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRemovePage(orgid, control, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool MiniSAAS.UIServiceReference.IUIService.EndRemovePage(System.IAsyncResult result) {
            return base.Channel.EndRemovePage(result);
        }
        
        private System.IAsyncResult OnBeginRemovePage(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int orgid = ((int)(inValues[0]));
            MiniSAAS.UIServiceReference.Control control = ((MiniSAAS.UIServiceReference.Control)(inValues[1]));
            return ((MiniSAAS.UIServiceReference.IUIService)(this)).BeginRemovePage(orgid, control, callback, asyncState);
        }
        
        private object[] OnEndRemovePage(System.IAsyncResult result) {
            bool retVal = ((MiniSAAS.UIServiceReference.IUIService)(this)).EndRemovePage(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRemovePageCompleted(object state) {
            if ((this.RemovePageCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RemovePageCompleted(this, new RemovePageCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RemovePageAsync(int orgid, MiniSAAS.UIServiceReference.Control control) {
            this.RemovePageAsync(orgid, control, null);
        }
        
        public void RemovePageAsync(int orgid, MiniSAAS.UIServiceReference.Control control, object userState) {
            if ((this.onBeginRemovePageDelegate == null)) {
                this.onBeginRemovePageDelegate = new BeginOperationDelegate(this.OnBeginRemovePage);
            }
            if ((this.onEndRemovePageDelegate == null)) {
                this.onEndRemovePageDelegate = new EndOperationDelegate(this.OnEndRemovePage);
            }
            if ((this.onRemovePageCompletedDelegate == null)) {
                this.onRemovePageCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRemovePageCompleted);
            }
            base.InvokeAsync(this.onBeginRemovePageDelegate, new object[] {
                        orgid,
                        control}, this.onEndRemovePageDelegate, this.onRemovePageCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override MiniSAAS.UIServiceReference.IUIService CreateChannel() {
            return new UIServiceClientChannel(this);
        }
        
        private class UIServiceClientChannel : ChannelBase<MiniSAAS.UIServiceReference.IUIService>, MiniSAAS.UIServiceReference.IUIService {
            
            public UIServiceClientChannel(System.ServiceModel.ClientBase<MiniSAAS.UIServiceReference.IUIService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginGetControls(int orgid, MiniSAAS.UIServiceReference.ControlLocation controllocation, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = orgid;
                _args[1] = controllocation;
                System.IAsyncResult _result = base.BeginInvoke("GetControls", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.Generic.List<MiniSAAS.UIServiceReference.Control> EndGetControls(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.Generic.List<MiniSAAS.UIServiceReference.Control> _result = ((System.Collections.Generic.List<MiniSAAS.UIServiceReference.Control>)(base.EndInvoke("GetControls", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginUpdateHeader(int orgid, MiniSAAS.UIServiceReference.Control control, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = orgid;
                _args[1] = control;
                System.IAsyncResult _result = base.BeginInvoke("UpdateHeader", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndUpdateHeader(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("UpdateHeader", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginAddLinks(int orgid, MiniSAAS.UIServiceReference.Control control, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = orgid;
                _args[1] = control;
                System.IAsyncResult _result = base.BeginInvoke("AddLinks", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndAddLinks(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("AddLinks", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginRemoveLinks(int orgid, MiniSAAS.UIServiceReference.Control control, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = orgid;
                _args[1] = control;
                System.IAsyncResult _result = base.BeginInvoke("RemoveLinks", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndRemoveLinks(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("RemoveLinks", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginAddPage(int orgid, MiniSAAS.UIServiceReference.Control control, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = orgid;
                _args[1] = control;
                System.IAsyncResult _result = base.BeginInvoke("AddPage", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndAddPage(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("AddPage", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginRemovePage(int orgid, MiniSAAS.UIServiceReference.Control control, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = orgid;
                _args[1] = control;
                System.IAsyncResult _result = base.BeginInvoke("RemovePage", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndRemovePage(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("RemovePage", _args, result)));
                return _result;
            }
        }
    }
}
