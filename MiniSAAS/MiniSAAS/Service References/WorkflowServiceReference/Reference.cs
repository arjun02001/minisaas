//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.239
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 4.0.50826.0
// 
namespace MiniSAAS.WorkflowServiceReference {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="WorkflowDescription", Namespace="http://schemas.datacontract.org/2004/07/MiniSAAS.Back.Classes")]
    public partial class WorkflowDescription : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int OrgIDField;
        
        private System.Collections.Generic.List<MiniSAAS.WorkflowServiceReference.Workflow> WorkflowsField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int OrgID {
            get {
                return this.OrgIDField;
            }
            set {
                if ((this.OrgIDField.Equals(value) != true)) {
                    this.OrgIDField = value;
                    this.RaisePropertyChanged("OrgID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<MiniSAAS.WorkflowServiceReference.Workflow> Workflows {
            get {
                return this.WorkflowsField;
            }
            set {
                if ((object.ReferenceEquals(this.WorkflowsField, value) != true)) {
                    this.WorkflowsField = value;
                    this.RaisePropertyChanged("Workflows");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Workflow", Namespace="http://schemas.datacontract.org/2004/07/MiniSAAS.Back.Classes")]
    public partial class Workflow : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.Collections.Generic.List<MiniSAAS.WorkflowServiceReference.Method> MethodsField;
        
        private int WorkflowIDField;
        
        private string WorkflowNameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<MiniSAAS.WorkflowServiceReference.Method> Methods {
            get {
                return this.MethodsField;
            }
            set {
                if ((object.ReferenceEquals(this.MethodsField, value) != true)) {
                    this.MethodsField = value;
                    this.RaisePropertyChanged("Methods");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int WorkflowID {
            get {
                return this.WorkflowIDField;
            }
            set {
                if ((this.WorkflowIDField.Equals(value) != true)) {
                    this.WorkflowIDField = value;
                    this.RaisePropertyChanged("WorkflowID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string WorkflowName {
            get {
                return this.WorkflowNameField;
            }
            set {
                if ((object.ReferenceEquals(this.WorkflowNameField, value) != true)) {
                    this.WorkflowNameField = value;
                    this.RaisePropertyChanged("WorkflowName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Method", Namespace="http://schemas.datacontract.org/2004/07/MiniSAAS.Back.Classes")]
    public partial class Method : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int MethodIDField;
        
        private string MethodNameField;
        
        private string ParametersField;
        
        private string ReturnTypeField;
        
        private int SequenceField;
        
        private string URLField;
        
        private int WorkflowIDField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int MethodID {
            get {
                return this.MethodIDField;
            }
            set {
                if ((this.MethodIDField.Equals(value) != true)) {
                    this.MethodIDField = value;
                    this.RaisePropertyChanged("MethodID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MethodName {
            get {
                return this.MethodNameField;
            }
            set {
                if ((object.ReferenceEquals(this.MethodNameField, value) != true)) {
                    this.MethodNameField = value;
                    this.RaisePropertyChanged("MethodName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Parameters {
            get {
                return this.ParametersField;
            }
            set {
                if ((object.ReferenceEquals(this.ParametersField, value) != true)) {
                    this.ParametersField = value;
                    this.RaisePropertyChanged("Parameters");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ReturnType {
            get {
                return this.ReturnTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.ReturnTypeField, value) != true)) {
                    this.ReturnTypeField = value;
                    this.RaisePropertyChanged("ReturnType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Sequence {
            get {
                return this.SequenceField;
            }
            set {
                if ((this.SequenceField.Equals(value) != true)) {
                    this.SequenceField = value;
                    this.RaisePropertyChanged("Sequence");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string URL {
            get {
                return this.URLField;
            }
            set {
                if ((object.ReferenceEquals(this.URLField, value) != true)) {
                    this.URLField = value;
                    this.RaisePropertyChanged("URL");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int WorkflowID {
            get {
                return this.WorkflowIDField;
            }
            set {
                if ((this.WorkflowIDField.Equals(value) != true)) {
                    this.WorkflowIDField = value;
                    this.RaisePropertyChanged("WorkflowID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="WorkflowServiceReference.IWorkflowService")]
    public interface IWorkflowService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IWorkflowService/Login", ReplyAction="http://tempuri.org/IWorkflowService/LoginResponse")]
        System.IAsyncResult BeginLogin(string emailid, string password, System.AsyncCallback callback, object asyncState);
        
        int EndLogin(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IWorkflowService/ForgotPassword", ReplyAction="http://tempuri.org/IWorkflowService/ForgotPasswordResponse")]
        System.IAsyncResult BeginForgotPassword(string emailid, System.AsyncCallback callback, object asyncState);
        
        bool EndForgotPassword(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IWorkflowService/Register", ReplyAction="http://tempuri.org/IWorkflowService/RegisterResponse")]
        System.IAsyncResult BeginRegister(int orgid, string emailid, string password, System.AsyncCallback callback, object asyncState);
        
        bool EndRegister(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IWorkflowService/ApplyCoupon", ReplyAction="http://tempuri.org/IWorkflowService/ApplyCouponResponse")]
        System.IAsyncResult BeginApplyCoupon(double amount, string couponcode, System.AsyncCallback callback, object asyncState);
        
        double EndApplyCoupon(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IWorkflowService/CalculateTax", ReplyAction="http://tempuri.org/IWorkflowService/CalculateTaxResponse")]
        System.IAsyncResult BeginCalculateTax(double amount, System.AsyncCallback callback, object asyncState);
        
        double EndCalculateTax(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IWorkflowService/VerifyCreditCard", ReplyAction="http://tempuri.org/IWorkflowService/VerifyCreditCardResponse")]
        System.IAsyncResult BeginVerifyCreditCard(string cardnumber, System.DateTime expdate, System.AsyncCallback callback, object asyncState);
        
        string EndVerifyCreditCard(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IWorkflowService/GetShippingVendors", ReplyAction="http://tempuri.org/IWorkflowService/GetShippingVendorsResponse")]
        System.IAsyncResult BeginGetShippingVendors(System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<string> EndGetShippingVendors(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IWorkflowService/ValidateZIP", ReplyAction="http://tempuri.org/IWorkflowService/ValidateZIPResponse")]
        System.IAsyncResult BeginValidateZIP(string zip, System.AsyncCallback callback, object asyncState);
        
        bool EndValidateZIP(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IWorkflowService/AddToCart", ReplyAction="http://tempuri.org/IWorkflowService/AddToCartResponse")]
        System.IAsyncResult BeginAddToCart(int orgid, string userid, string productid, System.AsyncCallback callback, object asyncState);
        
        bool EndAddToCart(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IWorkflowService/GetCart", ReplyAction="http://tempuri.org/IWorkflowService/GetCartResponse")]
        System.IAsyncResult BeginGetCart(int orgid, string userid, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<string> EndGetCart(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IWorkflowService/DeleteCart", ReplyAction="http://tempuri.org/IWorkflowService/DeleteCartResponse")]
        System.IAsyncResult BeginDeleteCart(int orgid, string userid, System.Collections.Generic.List<string> productids, System.AsyncCallback callback, object asyncState);
        
        bool EndDeleteCart(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IWorkflowService/GetWorkflows", ReplyAction="http://tempuri.org/IWorkflowService/GetWorkflowsResponse")]
        System.IAsyncResult BeginGetWorkflows(int orgid, System.AsyncCallback callback, object asyncState);
        
        MiniSAAS.WorkflowServiceReference.WorkflowDescription EndGetWorkflows(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IWorkflowService/AddWorkflow", ReplyAction="http://tempuri.org/IWorkflowService/AddWorkflowResponse")]
        System.IAsyncResult BeginAddWorkflow(string workflowname, int orgid, System.AsyncCallback callback, object asyncState);
        
        bool EndAddWorkflow(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IWorkflowService/DeleteWorkflow", ReplyAction="http://tempuri.org/IWorkflowService/DeleteWorkflowResponse")]
        System.IAsyncResult BeginDeleteWorkflow(int orgid, int workflowid, System.AsyncCallback callback, object asyncState);
        
        bool EndDeleteWorkflow(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IWorkflowService/DeleteMethod", ReplyAction="http://tempuri.org/IWorkflowService/DeleteMethodResponse")]
        System.IAsyncResult BeginDeleteMethod(int methodid, System.AsyncCallback callback, object asyncState);
        
        bool EndDeleteMethod(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IWorkflowService/GetURLMethods", ReplyAction="http://tempuri.org/IWorkflowService/GetURLMethodsResponse")]
        System.IAsyncResult BeginGetURLMethods(string url, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<MiniSAAS.WorkflowServiceReference.Method> EndGetURLMethods(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IWorkflowService/AddMethods", ReplyAction="http://tempuri.org/IWorkflowService/AddMethodsResponse")]
        System.IAsyncResult BeginAddMethods(MiniSAAS.WorkflowServiceReference.WorkflowDescription workflowdescription, System.AsyncCallback callback, object asyncState);
        
        bool EndAddMethods(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IWorkflowService/UpdateMethodSequence", ReplyAction="http://tempuri.org/IWorkflowService/UpdateMethodSequenceResponse")]
        System.IAsyncResult BeginUpdateMethodSequence(int methodid, int sequence, System.AsyncCallback callback, object asyncState);
        
        bool EndUpdateMethodSequence(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IWorkflowServiceChannel : MiniSAAS.WorkflowServiceReference.IWorkflowService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class LoginCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public LoginCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ForgotPasswordCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ForgotPasswordCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RegisterCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RegisterCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ApplyCouponCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ApplyCouponCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public double Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((double)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CalculateTaxCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public CalculateTaxCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public double Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((double)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class VerifyCreditCardCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public VerifyCreditCardCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetShippingVendorsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetShippingVendorsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<string> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<string>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ValidateZIPCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ValidateZIPCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AddToCartCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AddToCartCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetCartCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetCartCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<string> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<string>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DeleteCartCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DeleteCartCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetWorkflowsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetWorkflowsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MiniSAAS.WorkflowServiceReference.WorkflowDescription Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MiniSAAS.WorkflowServiceReference.WorkflowDescription)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AddWorkflowCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AddWorkflowCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DeleteWorkflowCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DeleteWorkflowCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DeleteMethodCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DeleteMethodCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetURLMethodsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetURLMethodsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<MiniSAAS.WorkflowServiceReference.Method> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<MiniSAAS.WorkflowServiceReference.Method>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AddMethodsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AddMethodsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UpdateMethodSequenceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public UpdateMethodSequenceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class WorkflowServiceClient : System.ServiceModel.ClientBase<MiniSAAS.WorkflowServiceReference.IWorkflowService>, MiniSAAS.WorkflowServiceReference.IWorkflowService {
        
        private BeginOperationDelegate onBeginLoginDelegate;
        
        private EndOperationDelegate onEndLoginDelegate;
        
        private System.Threading.SendOrPostCallback onLoginCompletedDelegate;
        
        private BeginOperationDelegate onBeginForgotPasswordDelegate;
        
        private EndOperationDelegate onEndForgotPasswordDelegate;
        
        private System.Threading.SendOrPostCallback onForgotPasswordCompletedDelegate;
        
        private BeginOperationDelegate onBeginRegisterDelegate;
        
        private EndOperationDelegate onEndRegisterDelegate;
        
        private System.Threading.SendOrPostCallback onRegisterCompletedDelegate;
        
        private BeginOperationDelegate onBeginApplyCouponDelegate;
        
        private EndOperationDelegate onEndApplyCouponDelegate;
        
        private System.Threading.SendOrPostCallback onApplyCouponCompletedDelegate;
        
        private BeginOperationDelegate onBeginCalculateTaxDelegate;
        
        private EndOperationDelegate onEndCalculateTaxDelegate;
        
        private System.Threading.SendOrPostCallback onCalculateTaxCompletedDelegate;
        
        private BeginOperationDelegate onBeginVerifyCreditCardDelegate;
        
        private EndOperationDelegate onEndVerifyCreditCardDelegate;
        
        private System.Threading.SendOrPostCallback onVerifyCreditCardCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetShippingVendorsDelegate;
        
        private EndOperationDelegate onEndGetShippingVendorsDelegate;
        
        private System.Threading.SendOrPostCallback onGetShippingVendorsCompletedDelegate;
        
        private BeginOperationDelegate onBeginValidateZIPDelegate;
        
        private EndOperationDelegate onEndValidateZIPDelegate;
        
        private System.Threading.SendOrPostCallback onValidateZIPCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddToCartDelegate;
        
        private EndOperationDelegate onEndAddToCartDelegate;
        
        private System.Threading.SendOrPostCallback onAddToCartCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetCartDelegate;
        
        private EndOperationDelegate onEndGetCartDelegate;
        
        private System.Threading.SendOrPostCallback onGetCartCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteCartDelegate;
        
        private EndOperationDelegate onEndDeleteCartDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteCartCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetWorkflowsDelegate;
        
        private EndOperationDelegate onEndGetWorkflowsDelegate;
        
        private System.Threading.SendOrPostCallback onGetWorkflowsCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddWorkflowDelegate;
        
        private EndOperationDelegate onEndAddWorkflowDelegate;
        
        private System.Threading.SendOrPostCallback onAddWorkflowCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteWorkflowDelegate;
        
        private EndOperationDelegate onEndDeleteWorkflowDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteWorkflowCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteMethodDelegate;
        
        private EndOperationDelegate onEndDeleteMethodDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteMethodCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetURLMethodsDelegate;
        
        private EndOperationDelegate onEndGetURLMethodsDelegate;
        
        private System.Threading.SendOrPostCallback onGetURLMethodsCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddMethodsDelegate;
        
        private EndOperationDelegate onEndAddMethodsDelegate;
        
        private System.Threading.SendOrPostCallback onAddMethodsCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateMethodSequenceDelegate;
        
        private EndOperationDelegate onEndUpdateMethodSequenceDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateMethodSequenceCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public WorkflowServiceClient() {
        }
        
        public WorkflowServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public WorkflowServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WorkflowServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WorkflowServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<LoginCompletedEventArgs> LoginCompleted;
        
        public event System.EventHandler<ForgotPasswordCompletedEventArgs> ForgotPasswordCompleted;
        
        public event System.EventHandler<RegisterCompletedEventArgs> RegisterCompleted;
        
        public event System.EventHandler<ApplyCouponCompletedEventArgs> ApplyCouponCompleted;
        
        public event System.EventHandler<CalculateTaxCompletedEventArgs> CalculateTaxCompleted;
        
        public event System.EventHandler<VerifyCreditCardCompletedEventArgs> VerifyCreditCardCompleted;
        
        public event System.EventHandler<GetShippingVendorsCompletedEventArgs> GetShippingVendorsCompleted;
        
        public event System.EventHandler<ValidateZIPCompletedEventArgs> ValidateZIPCompleted;
        
        public event System.EventHandler<AddToCartCompletedEventArgs> AddToCartCompleted;
        
        public event System.EventHandler<GetCartCompletedEventArgs> GetCartCompleted;
        
        public event System.EventHandler<DeleteCartCompletedEventArgs> DeleteCartCompleted;
        
        public event System.EventHandler<GetWorkflowsCompletedEventArgs> GetWorkflowsCompleted;
        
        public event System.EventHandler<AddWorkflowCompletedEventArgs> AddWorkflowCompleted;
        
        public event System.EventHandler<DeleteWorkflowCompletedEventArgs> DeleteWorkflowCompleted;
        
        public event System.EventHandler<DeleteMethodCompletedEventArgs> DeleteMethodCompleted;
        
        public event System.EventHandler<GetURLMethodsCompletedEventArgs> GetURLMethodsCompleted;
        
        public event System.EventHandler<AddMethodsCompletedEventArgs> AddMethodsCompleted;
        
        public event System.EventHandler<UpdateMethodSequenceCompletedEventArgs> UpdateMethodSequenceCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MiniSAAS.WorkflowServiceReference.IWorkflowService.BeginLogin(string emailid, string password, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginLogin(emailid, password, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        int MiniSAAS.WorkflowServiceReference.IWorkflowService.EndLogin(System.IAsyncResult result) {
            return base.Channel.EndLogin(result);
        }
        
        private System.IAsyncResult OnBeginLogin(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string emailid = ((string)(inValues[0]));
            string password = ((string)(inValues[1]));
            return ((MiniSAAS.WorkflowServiceReference.IWorkflowService)(this)).BeginLogin(emailid, password, callback, asyncState);
        }
        
        private object[] OnEndLogin(System.IAsyncResult result) {
            int retVal = ((MiniSAAS.WorkflowServiceReference.IWorkflowService)(this)).EndLogin(result);
            return new object[] {
                    retVal};
        }
        
        private void OnLoginCompleted(object state) {
            if ((this.LoginCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.LoginCompleted(this, new LoginCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void LoginAsync(string emailid, string password) {
            this.LoginAsync(emailid, password, null);
        }
        
        public void LoginAsync(string emailid, string password, object userState) {
            if ((this.onBeginLoginDelegate == null)) {
                this.onBeginLoginDelegate = new BeginOperationDelegate(this.OnBeginLogin);
            }
            if ((this.onEndLoginDelegate == null)) {
                this.onEndLoginDelegate = new EndOperationDelegate(this.OnEndLogin);
            }
            if ((this.onLoginCompletedDelegate == null)) {
                this.onLoginCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnLoginCompleted);
            }
            base.InvokeAsync(this.onBeginLoginDelegate, new object[] {
                        emailid,
                        password}, this.onEndLoginDelegate, this.onLoginCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MiniSAAS.WorkflowServiceReference.IWorkflowService.BeginForgotPassword(string emailid, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginForgotPassword(emailid, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool MiniSAAS.WorkflowServiceReference.IWorkflowService.EndForgotPassword(System.IAsyncResult result) {
            return base.Channel.EndForgotPassword(result);
        }
        
        private System.IAsyncResult OnBeginForgotPassword(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string emailid = ((string)(inValues[0]));
            return ((MiniSAAS.WorkflowServiceReference.IWorkflowService)(this)).BeginForgotPassword(emailid, callback, asyncState);
        }
        
        private object[] OnEndForgotPassword(System.IAsyncResult result) {
            bool retVal = ((MiniSAAS.WorkflowServiceReference.IWorkflowService)(this)).EndForgotPassword(result);
            return new object[] {
                    retVal};
        }
        
        private void OnForgotPasswordCompleted(object state) {
            if ((this.ForgotPasswordCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ForgotPasswordCompleted(this, new ForgotPasswordCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ForgotPasswordAsync(string emailid) {
            this.ForgotPasswordAsync(emailid, null);
        }
        
        public void ForgotPasswordAsync(string emailid, object userState) {
            if ((this.onBeginForgotPasswordDelegate == null)) {
                this.onBeginForgotPasswordDelegate = new BeginOperationDelegate(this.OnBeginForgotPassword);
            }
            if ((this.onEndForgotPasswordDelegate == null)) {
                this.onEndForgotPasswordDelegate = new EndOperationDelegate(this.OnEndForgotPassword);
            }
            if ((this.onForgotPasswordCompletedDelegate == null)) {
                this.onForgotPasswordCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnForgotPasswordCompleted);
            }
            base.InvokeAsync(this.onBeginForgotPasswordDelegate, new object[] {
                        emailid}, this.onEndForgotPasswordDelegate, this.onForgotPasswordCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MiniSAAS.WorkflowServiceReference.IWorkflowService.BeginRegister(int orgid, string emailid, string password, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRegister(orgid, emailid, password, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool MiniSAAS.WorkflowServiceReference.IWorkflowService.EndRegister(System.IAsyncResult result) {
            return base.Channel.EndRegister(result);
        }
        
        private System.IAsyncResult OnBeginRegister(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int orgid = ((int)(inValues[0]));
            string emailid = ((string)(inValues[1]));
            string password = ((string)(inValues[2]));
            return ((MiniSAAS.WorkflowServiceReference.IWorkflowService)(this)).BeginRegister(orgid, emailid, password, callback, asyncState);
        }
        
        private object[] OnEndRegister(System.IAsyncResult result) {
            bool retVal = ((MiniSAAS.WorkflowServiceReference.IWorkflowService)(this)).EndRegister(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRegisterCompleted(object state) {
            if ((this.RegisterCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RegisterCompleted(this, new RegisterCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RegisterAsync(int orgid, string emailid, string password) {
            this.RegisterAsync(orgid, emailid, password, null);
        }
        
        public void RegisterAsync(int orgid, string emailid, string password, object userState) {
            if ((this.onBeginRegisterDelegate == null)) {
                this.onBeginRegisterDelegate = new BeginOperationDelegate(this.OnBeginRegister);
            }
            if ((this.onEndRegisterDelegate == null)) {
                this.onEndRegisterDelegate = new EndOperationDelegate(this.OnEndRegister);
            }
            if ((this.onRegisterCompletedDelegate == null)) {
                this.onRegisterCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRegisterCompleted);
            }
            base.InvokeAsync(this.onBeginRegisterDelegate, new object[] {
                        orgid,
                        emailid,
                        password}, this.onEndRegisterDelegate, this.onRegisterCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MiniSAAS.WorkflowServiceReference.IWorkflowService.BeginApplyCoupon(double amount, string couponcode, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginApplyCoupon(amount, couponcode, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        double MiniSAAS.WorkflowServiceReference.IWorkflowService.EndApplyCoupon(System.IAsyncResult result) {
            return base.Channel.EndApplyCoupon(result);
        }
        
        private System.IAsyncResult OnBeginApplyCoupon(object[] inValues, System.AsyncCallback callback, object asyncState) {
            double amount = ((double)(inValues[0]));
            string couponcode = ((string)(inValues[1]));
            return ((MiniSAAS.WorkflowServiceReference.IWorkflowService)(this)).BeginApplyCoupon(amount, couponcode, callback, asyncState);
        }
        
        private object[] OnEndApplyCoupon(System.IAsyncResult result) {
            double retVal = ((MiniSAAS.WorkflowServiceReference.IWorkflowService)(this)).EndApplyCoupon(result);
            return new object[] {
                    retVal};
        }
        
        private void OnApplyCouponCompleted(object state) {
            if ((this.ApplyCouponCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ApplyCouponCompleted(this, new ApplyCouponCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ApplyCouponAsync(double amount, string couponcode) {
            this.ApplyCouponAsync(amount, couponcode, null);
        }
        
        public void ApplyCouponAsync(double amount, string couponcode, object userState) {
            if ((this.onBeginApplyCouponDelegate == null)) {
                this.onBeginApplyCouponDelegate = new BeginOperationDelegate(this.OnBeginApplyCoupon);
            }
            if ((this.onEndApplyCouponDelegate == null)) {
                this.onEndApplyCouponDelegate = new EndOperationDelegate(this.OnEndApplyCoupon);
            }
            if ((this.onApplyCouponCompletedDelegate == null)) {
                this.onApplyCouponCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnApplyCouponCompleted);
            }
            base.InvokeAsync(this.onBeginApplyCouponDelegate, new object[] {
                        amount,
                        couponcode}, this.onEndApplyCouponDelegate, this.onApplyCouponCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MiniSAAS.WorkflowServiceReference.IWorkflowService.BeginCalculateTax(double amount, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCalculateTax(amount, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        double MiniSAAS.WorkflowServiceReference.IWorkflowService.EndCalculateTax(System.IAsyncResult result) {
            return base.Channel.EndCalculateTax(result);
        }
        
        private System.IAsyncResult OnBeginCalculateTax(object[] inValues, System.AsyncCallback callback, object asyncState) {
            double amount = ((double)(inValues[0]));
            return ((MiniSAAS.WorkflowServiceReference.IWorkflowService)(this)).BeginCalculateTax(amount, callback, asyncState);
        }
        
        private object[] OnEndCalculateTax(System.IAsyncResult result) {
            double retVal = ((MiniSAAS.WorkflowServiceReference.IWorkflowService)(this)).EndCalculateTax(result);
            return new object[] {
                    retVal};
        }
        
        private void OnCalculateTaxCompleted(object state) {
            if ((this.CalculateTaxCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CalculateTaxCompleted(this, new CalculateTaxCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CalculateTaxAsync(double amount) {
            this.CalculateTaxAsync(amount, null);
        }
        
        public void CalculateTaxAsync(double amount, object userState) {
            if ((this.onBeginCalculateTaxDelegate == null)) {
                this.onBeginCalculateTaxDelegate = new BeginOperationDelegate(this.OnBeginCalculateTax);
            }
            if ((this.onEndCalculateTaxDelegate == null)) {
                this.onEndCalculateTaxDelegate = new EndOperationDelegate(this.OnEndCalculateTax);
            }
            if ((this.onCalculateTaxCompletedDelegate == null)) {
                this.onCalculateTaxCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCalculateTaxCompleted);
            }
            base.InvokeAsync(this.onBeginCalculateTaxDelegate, new object[] {
                        amount}, this.onEndCalculateTaxDelegate, this.onCalculateTaxCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MiniSAAS.WorkflowServiceReference.IWorkflowService.BeginVerifyCreditCard(string cardnumber, System.DateTime expdate, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginVerifyCreditCard(cardnumber, expdate, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string MiniSAAS.WorkflowServiceReference.IWorkflowService.EndVerifyCreditCard(System.IAsyncResult result) {
            return base.Channel.EndVerifyCreditCard(result);
        }
        
        private System.IAsyncResult OnBeginVerifyCreditCard(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string cardnumber = ((string)(inValues[0]));
            System.DateTime expdate = ((System.DateTime)(inValues[1]));
            return ((MiniSAAS.WorkflowServiceReference.IWorkflowService)(this)).BeginVerifyCreditCard(cardnumber, expdate, callback, asyncState);
        }
        
        private object[] OnEndVerifyCreditCard(System.IAsyncResult result) {
            string retVal = ((MiniSAAS.WorkflowServiceReference.IWorkflowService)(this)).EndVerifyCreditCard(result);
            return new object[] {
                    retVal};
        }
        
        private void OnVerifyCreditCardCompleted(object state) {
            if ((this.VerifyCreditCardCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.VerifyCreditCardCompleted(this, new VerifyCreditCardCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void VerifyCreditCardAsync(string cardnumber, System.DateTime expdate) {
            this.VerifyCreditCardAsync(cardnumber, expdate, null);
        }
        
        public void VerifyCreditCardAsync(string cardnumber, System.DateTime expdate, object userState) {
            if ((this.onBeginVerifyCreditCardDelegate == null)) {
                this.onBeginVerifyCreditCardDelegate = new BeginOperationDelegate(this.OnBeginVerifyCreditCard);
            }
            if ((this.onEndVerifyCreditCardDelegate == null)) {
                this.onEndVerifyCreditCardDelegate = new EndOperationDelegate(this.OnEndVerifyCreditCard);
            }
            if ((this.onVerifyCreditCardCompletedDelegate == null)) {
                this.onVerifyCreditCardCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnVerifyCreditCardCompleted);
            }
            base.InvokeAsync(this.onBeginVerifyCreditCardDelegate, new object[] {
                        cardnumber,
                        expdate}, this.onEndVerifyCreditCardDelegate, this.onVerifyCreditCardCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MiniSAAS.WorkflowServiceReference.IWorkflowService.BeginGetShippingVendors(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetShippingVendors(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.Generic.List<string> MiniSAAS.WorkflowServiceReference.IWorkflowService.EndGetShippingVendors(System.IAsyncResult result) {
            return base.Channel.EndGetShippingVendors(result);
        }
        
        private System.IAsyncResult OnBeginGetShippingVendors(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((MiniSAAS.WorkflowServiceReference.IWorkflowService)(this)).BeginGetShippingVendors(callback, asyncState);
        }
        
        private object[] OnEndGetShippingVendors(System.IAsyncResult result) {
            System.Collections.Generic.List<string> retVal = ((MiniSAAS.WorkflowServiceReference.IWorkflowService)(this)).EndGetShippingVendors(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetShippingVendorsCompleted(object state) {
            if ((this.GetShippingVendorsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetShippingVendorsCompleted(this, new GetShippingVendorsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetShippingVendorsAsync() {
            this.GetShippingVendorsAsync(null);
        }
        
        public void GetShippingVendorsAsync(object userState) {
            if ((this.onBeginGetShippingVendorsDelegate == null)) {
                this.onBeginGetShippingVendorsDelegate = new BeginOperationDelegate(this.OnBeginGetShippingVendors);
            }
            if ((this.onEndGetShippingVendorsDelegate == null)) {
                this.onEndGetShippingVendorsDelegate = new EndOperationDelegate(this.OnEndGetShippingVendors);
            }
            if ((this.onGetShippingVendorsCompletedDelegate == null)) {
                this.onGetShippingVendorsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetShippingVendorsCompleted);
            }
            base.InvokeAsync(this.onBeginGetShippingVendorsDelegate, null, this.onEndGetShippingVendorsDelegate, this.onGetShippingVendorsCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MiniSAAS.WorkflowServiceReference.IWorkflowService.BeginValidateZIP(string zip, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginValidateZIP(zip, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool MiniSAAS.WorkflowServiceReference.IWorkflowService.EndValidateZIP(System.IAsyncResult result) {
            return base.Channel.EndValidateZIP(result);
        }
        
        private System.IAsyncResult OnBeginValidateZIP(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string zip = ((string)(inValues[0]));
            return ((MiniSAAS.WorkflowServiceReference.IWorkflowService)(this)).BeginValidateZIP(zip, callback, asyncState);
        }
        
        private object[] OnEndValidateZIP(System.IAsyncResult result) {
            bool retVal = ((MiniSAAS.WorkflowServiceReference.IWorkflowService)(this)).EndValidateZIP(result);
            return new object[] {
                    retVal};
        }
        
        private void OnValidateZIPCompleted(object state) {
            if ((this.ValidateZIPCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ValidateZIPCompleted(this, new ValidateZIPCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ValidateZIPAsync(string zip) {
            this.ValidateZIPAsync(zip, null);
        }
        
        public void ValidateZIPAsync(string zip, object userState) {
            if ((this.onBeginValidateZIPDelegate == null)) {
                this.onBeginValidateZIPDelegate = new BeginOperationDelegate(this.OnBeginValidateZIP);
            }
            if ((this.onEndValidateZIPDelegate == null)) {
                this.onEndValidateZIPDelegate = new EndOperationDelegate(this.OnEndValidateZIP);
            }
            if ((this.onValidateZIPCompletedDelegate == null)) {
                this.onValidateZIPCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnValidateZIPCompleted);
            }
            base.InvokeAsync(this.onBeginValidateZIPDelegate, new object[] {
                        zip}, this.onEndValidateZIPDelegate, this.onValidateZIPCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MiniSAAS.WorkflowServiceReference.IWorkflowService.BeginAddToCart(int orgid, string userid, string productid, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddToCart(orgid, userid, productid, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool MiniSAAS.WorkflowServiceReference.IWorkflowService.EndAddToCart(System.IAsyncResult result) {
            return base.Channel.EndAddToCart(result);
        }
        
        private System.IAsyncResult OnBeginAddToCart(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int orgid = ((int)(inValues[0]));
            string userid = ((string)(inValues[1]));
            string productid = ((string)(inValues[2]));
            return ((MiniSAAS.WorkflowServiceReference.IWorkflowService)(this)).BeginAddToCart(orgid, userid, productid, callback, asyncState);
        }
        
        private object[] OnEndAddToCart(System.IAsyncResult result) {
            bool retVal = ((MiniSAAS.WorkflowServiceReference.IWorkflowService)(this)).EndAddToCart(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAddToCartCompleted(object state) {
            if ((this.AddToCartCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddToCartCompleted(this, new AddToCartCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddToCartAsync(int orgid, string userid, string productid) {
            this.AddToCartAsync(orgid, userid, productid, null);
        }
        
        public void AddToCartAsync(int orgid, string userid, string productid, object userState) {
            if ((this.onBeginAddToCartDelegate == null)) {
                this.onBeginAddToCartDelegate = new BeginOperationDelegate(this.OnBeginAddToCart);
            }
            if ((this.onEndAddToCartDelegate == null)) {
                this.onEndAddToCartDelegate = new EndOperationDelegate(this.OnEndAddToCart);
            }
            if ((this.onAddToCartCompletedDelegate == null)) {
                this.onAddToCartCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddToCartCompleted);
            }
            base.InvokeAsync(this.onBeginAddToCartDelegate, new object[] {
                        orgid,
                        userid,
                        productid}, this.onEndAddToCartDelegate, this.onAddToCartCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MiniSAAS.WorkflowServiceReference.IWorkflowService.BeginGetCart(int orgid, string userid, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetCart(orgid, userid, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.Generic.List<string> MiniSAAS.WorkflowServiceReference.IWorkflowService.EndGetCart(System.IAsyncResult result) {
            return base.Channel.EndGetCart(result);
        }
        
        private System.IAsyncResult OnBeginGetCart(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int orgid = ((int)(inValues[0]));
            string userid = ((string)(inValues[1]));
            return ((MiniSAAS.WorkflowServiceReference.IWorkflowService)(this)).BeginGetCart(orgid, userid, callback, asyncState);
        }
        
        private object[] OnEndGetCart(System.IAsyncResult result) {
            System.Collections.Generic.List<string> retVal = ((MiniSAAS.WorkflowServiceReference.IWorkflowService)(this)).EndGetCart(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetCartCompleted(object state) {
            if ((this.GetCartCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetCartCompleted(this, new GetCartCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetCartAsync(int orgid, string userid) {
            this.GetCartAsync(orgid, userid, null);
        }
        
        public void GetCartAsync(int orgid, string userid, object userState) {
            if ((this.onBeginGetCartDelegate == null)) {
                this.onBeginGetCartDelegate = new BeginOperationDelegate(this.OnBeginGetCart);
            }
            if ((this.onEndGetCartDelegate == null)) {
                this.onEndGetCartDelegate = new EndOperationDelegate(this.OnEndGetCart);
            }
            if ((this.onGetCartCompletedDelegate == null)) {
                this.onGetCartCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetCartCompleted);
            }
            base.InvokeAsync(this.onBeginGetCartDelegate, new object[] {
                        orgid,
                        userid}, this.onEndGetCartDelegate, this.onGetCartCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MiniSAAS.WorkflowServiceReference.IWorkflowService.BeginDeleteCart(int orgid, string userid, System.Collections.Generic.List<string> productids, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteCart(orgid, userid, productids, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool MiniSAAS.WorkflowServiceReference.IWorkflowService.EndDeleteCart(System.IAsyncResult result) {
            return base.Channel.EndDeleteCart(result);
        }
        
        private System.IAsyncResult OnBeginDeleteCart(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int orgid = ((int)(inValues[0]));
            string userid = ((string)(inValues[1]));
            System.Collections.Generic.List<string> productids = ((System.Collections.Generic.List<string>)(inValues[2]));
            return ((MiniSAAS.WorkflowServiceReference.IWorkflowService)(this)).BeginDeleteCart(orgid, userid, productids, callback, asyncState);
        }
        
        private object[] OnEndDeleteCart(System.IAsyncResult result) {
            bool retVal = ((MiniSAAS.WorkflowServiceReference.IWorkflowService)(this)).EndDeleteCart(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDeleteCartCompleted(object state) {
            if ((this.DeleteCartCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteCartCompleted(this, new DeleteCartCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteCartAsync(int orgid, string userid, System.Collections.Generic.List<string> productids) {
            this.DeleteCartAsync(orgid, userid, productids, null);
        }
        
        public void DeleteCartAsync(int orgid, string userid, System.Collections.Generic.List<string> productids, object userState) {
            if ((this.onBeginDeleteCartDelegate == null)) {
                this.onBeginDeleteCartDelegate = new BeginOperationDelegate(this.OnBeginDeleteCart);
            }
            if ((this.onEndDeleteCartDelegate == null)) {
                this.onEndDeleteCartDelegate = new EndOperationDelegate(this.OnEndDeleteCart);
            }
            if ((this.onDeleteCartCompletedDelegate == null)) {
                this.onDeleteCartCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteCartCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteCartDelegate, new object[] {
                        orgid,
                        userid,
                        productids}, this.onEndDeleteCartDelegate, this.onDeleteCartCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MiniSAAS.WorkflowServiceReference.IWorkflowService.BeginGetWorkflows(int orgid, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetWorkflows(orgid, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MiniSAAS.WorkflowServiceReference.WorkflowDescription MiniSAAS.WorkflowServiceReference.IWorkflowService.EndGetWorkflows(System.IAsyncResult result) {
            return base.Channel.EndGetWorkflows(result);
        }
        
        private System.IAsyncResult OnBeginGetWorkflows(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int orgid = ((int)(inValues[0]));
            return ((MiniSAAS.WorkflowServiceReference.IWorkflowService)(this)).BeginGetWorkflows(orgid, callback, asyncState);
        }
        
        private object[] OnEndGetWorkflows(System.IAsyncResult result) {
            MiniSAAS.WorkflowServiceReference.WorkflowDescription retVal = ((MiniSAAS.WorkflowServiceReference.IWorkflowService)(this)).EndGetWorkflows(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetWorkflowsCompleted(object state) {
            if ((this.GetWorkflowsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetWorkflowsCompleted(this, new GetWorkflowsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetWorkflowsAsync(int orgid) {
            this.GetWorkflowsAsync(orgid, null);
        }
        
        public void GetWorkflowsAsync(int orgid, object userState) {
            if ((this.onBeginGetWorkflowsDelegate == null)) {
                this.onBeginGetWorkflowsDelegate = new BeginOperationDelegate(this.OnBeginGetWorkflows);
            }
            if ((this.onEndGetWorkflowsDelegate == null)) {
                this.onEndGetWorkflowsDelegate = new EndOperationDelegate(this.OnEndGetWorkflows);
            }
            if ((this.onGetWorkflowsCompletedDelegate == null)) {
                this.onGetWorkflowsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetWorkflowsCompleted);
            }
            base.InvokeAsync(this.onBeginGetWorkflowsDelegate, new object[] {
                        orgid}, this.onEndGetWorkflowsDelegate, this.onGetWorkflowsCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MiniSAAS.WorkflowServiceReference.IWorkflowService.BeginAddWorkflow(string workflowname, int orgid, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddWorkflow(workflowname, orgid, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool MiniSAAS.WorkflowServiceReference.IWorkflowService.EndAddWorkflow(System.IAsyncResult result) {
            return base.Channel.EndAddWorkflow(result);
        }
        
        private System.IAsyncResult OnBeginAddWorkflow(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string workflowname = ((string)(inValues[0]));
            int orgid = ((int)(inValues[1]));
            return ((MiniSAAS.WorkflowServiceReference.IWorkflowService)(this)).BeginAddWorkflow(workflowname, orgid, callback, asyncState);
        }
        
        private object[] OnEndAddWorkflow(System.IAsyncResult result) {
            bool retVal = ((MiniSAAS.WorkflowServiceReference.IWorkflowService)(this)).EndAddWorkflow(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAddWorkflowCompleted(object state) {
            if ((this.AddWorkflowCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddWorkflowCompleted(this, new AddWorkflowCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddWorkflowAsync(string workflowname, int orgid) {
            this.AddWorkflowAsync(workflowname, orgid, null);
        }
        
        public void AddWorkflowAsync(string workflowname, int orgid, object userState) {
            if ((this.onBeginAddWorkflowDelegate == null)) {
                this.onBeginAddWorkflowDelegate = new BeginOperationDelegate(this.OnBeginAddWorkflow);
            }
            if ((this.onEndAddWorkflowDelegate == null)) {
                this.onEndAddWorkflowDelegate = new EndOperationDelegate(this.OnEndAddWorkflow);
            }
            if ((this.onAddWorkflowCompletedDelegate == null)) {
                this.onAddWorkflowCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddWorkflowCompleted);
            }
            base.InvokeAsync(this.onBeginAddWorkflowDelegate, new object[] {
                        workflowname,
                        orgid}, this.onEndAddWorkflowDelegate, this.onAddWorkflowCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MiniSAAS.WorkflowServiceReference.IWorkflowService.BeginDeleteWorkflow(int orgid, int workflowid, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteWorkflow(orgid, workflowid, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool MiniSAAS.WorkflowServiceReference.IWorkflowService.EndDeleteWorkflow(System.IAsyncResult result) {
            return base.Channel.EndDeleteWorkflow(result);
        }
        
        private System.IAsyncResult OnBeginDeleteWorkflow(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int orgid = ((int)(inValues[0]));
            int workflowid = ((int)(inValues[1]));
            return ((MiniSAAS.WorkflowServiceReference.IWorkflowService)(this)).BeginDeleteWorkflow(orgid, workflowid, callback, asyncState);
        }
        
        private object[] OnEndDeleteWorkflow(System.IAsyncResult result) {
            bool retVal = ((MiniSAAS.WorkflowServiceReference.IWorkflowService)(this)).EndDeleteWorkflow(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDeleteWorkflowCompleted(object state) {
            if ((this.DeleteWorkflowCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteWorkflowCompleted(this, new DeleteWorkflowCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteWorkflowAsync(int orgid, int workflowid) {
            this.DeleteWorkflowAsync(orgid, workflowid, null);
        }
        
        public void DeleteWorkflowAsync(int orgid, int workflowid, object userState) {
            if ((this.onBeginDeleteWorkflowDelegate == null)) {
                this.onBeginDeleteWorkflowDelegate = new BeginOperationDelegate(this.OnBeginDeleteWorkflow);
            }
            if ((this.onEndDeleteWorkflowDelegate == null)) {
                this.onEndDeleteWorkflowDelegate = new EndOperationDelegate(this.OnEndDeleteWorkflow);
            }
            if ((this.onDeleteWorkflowCompletedDelegate == null)) {
                this.onDeleteWorkflowCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteWorkflowCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteWorkflowDelegate, new object[] {
                        orgid,
                        workflowid}, this.onEndDeleteWorkflowDelegate, this.onDeleteWorkflowCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MiniSAAS.WorkflowServiceReference.IWorkflowService.BeginDeleteMethod(int methodid, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteMethod(methodid, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool MiniSAAS.WorkflowServiceReference.IWorkflowService.EndDeleteMethod(System.IAsyncResult result) {
            return base.Channel.EndDeleteMethod(result);
        }
        
        private System.IAsyncResult OnBeginDeleteMethod(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int methodid = ((int)(inValues[0]));
            return ((MiniSAAS.WorkflowServiceReference.IWorkflowService)(this)).BeginDeleteMethod(methodid, callback, asyncState);
        }
        
        private object[] OnEndDeleteMethod(System.IAsyncResult result) {
            bool retVal = ((MiniSAAS.WorkflowServiceReference.IWorkflowService)(this)).EndDeleteMethod(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDeleteMethodCompleted(object state) {
            if ((this.DeleteMethodCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteMethodCompleted(this, new DeleteMethodCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteMethodAsync(int methodid) {
            this.DeleteMethodAsync(methodid, null);
        }
        
        public void DeleteMethodAsync(int methodid, object userState) {
            if ((this.onBeginDeleteMethodDelegate == null)) {
                this.onBeginDeleteMethodDelegate = new BeginOperationDelegate(this.OnBeginDeleteMethod);
            }
            if ((this.onEndDeleteMethodDelegate == null)) {
                this.onEndDeleteMethodDelegate = new EndOperationDelegate(this.OnEndDeleteMethod);
            }
            if ((this.onDeleteMethodCompletedDelegate == null)) {
                this.onDeleteMethodCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteMethodCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteMethodDelegate, new object[] {
                        methodid}, this.onEndDeleteMethodDelegate, this.onDeleteMethodCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MiniSAAS.WorkflowServiceReference.IWorkflowService.BeginGetURLMethods(string url, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetURLMethods(url, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.Generic.List<MiniSAAS.WorkflowServiceReference.Method> MiniSAAS.WorkflowServiceReference.IWorkflowService.EndGetURLMethods(System.IAsyncResult result) {
            return base.Channel.EndGetURLMethods(result);
        }
        
        private System.IAsyncResult OnBeginGetURLMethods(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string url = ((string)(inValues[0]));
            return ((MiniSAAS.WorkflowServiceReference.IWorkflowService)(this)).BeginGetURLMethods(url, callback, asyncState);
        }
        
        private object[] OnEndGetURLMethods(System.IAsyncResult result) {
            System.Collections.Generic.List<MiniSAAS.WorkflowServiceReference.Method> retVal = ((MiniSAAS.WorkflowServiceReference.IWorkflowService)(this)).EndGetURLMethods(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetURLMethodsCompleted(object state) {
            if ((this.GetURLMethodsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetURLMethodsCompleted(this, new GetURLMethodsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetURLMethodsAsync(string url) {
            this.GetURLMethodsAsync(url, null);
        }
        
        public void GetURLMethodsAsync(string url, object userState) {
            if ((this.onBeginGetURLMethodsDelegate == null)) {
                this.onBeginGetURLMethodsDelegate = new BeginOperationDelegate(this.OnBeginGetURLMethods);
            }
            if ((this.onEndGetURLMethodsDelegate == null)) {
                this.onEndGetURLMethodsDelegate = new EndOperationDelegate(this.OnEndGetURLMethods);
            }
            if ((this.onGetURLMethodsCompletedDelegate == null)) {
                this.onGetURLMethodsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetURLMethodsCompleted);
            }
            base.InvokeAsync(this.onBeginGetURLMethodsDelegate, new object[] {
                        url}, this.onEndGetURLMethodsDelegate, this.onGetURLMethodsCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MiniSAAS.WorkflowServiceReference.IWorkflowService.BeginAddMethods(MiniSAAS.WorkflowServiceReference.WorkflowDescription workflowdescription, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddMethods(workflowdescription, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool MiniSAAS.WorkflowServiceReference.IWorkflowService.EndAddMethods(System.IAsyncResult result) {
            return base.Channel.EndAddMethods(result);
        }
        
        private System.IAsyncResult OnBeginAddMethods(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MiniSAAS.WorkflowServiceReference.WorkflowDescription workflowdescription = ((MiniSAAS.WorkflowServiceReference.WorkflowDescription)(inValues[0]));
            return ((MiniSAAS.WorkflowServiceReference.IWorkflowService)(this)).BeginAddMethods(workflowdescription, callback, asyncState);
        }
        
        private object[] OnEndAddMethods(System.IAsyncResult result) {
            bool retVal = ((MiniSAAS.WorkflowServiceReference.IWorkflowService)(this)).EndAddMethods(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAddMethodsCompleted(object state) {
            if ((this.AddMethodsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddMethodsCompleted(this, new AddMethodsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddMethodsAsync(MiniSAAS.WorkflowServiceReference.WorkflowDescription workflowdescription) {
            this.AddMethodsAsync(workflowdescription, null);
        }
        
        public void AddMethodsAsync(MiniSAAS.WorkflowServiceReference.WorkflowDescription workflowdescription, object userState) {
            if ((this.onBeginAddMethodsDelegate == null)) {
                this.onBeginAddMethodsDelegate = new BeginOperationDelegate(this.OnBeginAddMethods);
            }
            if ((this.onEndAddMethodsDelegate == null)) {
                this.onEndAddMethodsDelegate = new EndOperationDelegate(this.OnEndAddMethods);
            }
            if ((this.onAddMethodsCompletedDelegate == null)) {
                this.onAddMethodsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddMethodsCompleted);
            }
            base.InvokeAsync(this.onBeginAddMethodsDelegate, new object[] {
                        workflowdescription}, this.onEndAddMethodsDelegate, this.onAddMethodsCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MiniSAAS.WorkflowServiceReference.IWorkflowService.BeginUpdateMethodSequence(int methodid, int sequence, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdateMethodSequence(methodid, sequence, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool MiniSAAS.WorkflowServiceReference.IWorkflowService.EndUpdateMethodSequence(System.IAsyncResult result) {
            return base.Channel.EndUpdateMethodSequence(result);
        }
        
        private System.IAsyncResult OnBeginUpdateMethodSequence(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int methodid = ((int)(inValues[0]));
            int sequence = ((int)(inValues[1]));
            return ((MiniSAAS.WorkflowServiceReference.IWorkflowService)(this)).BeginUpdateMethodSequence(methodid, sequence, callback, asyncState);
        }
        
        private object[] OnEndUpdateMethodSequence(System.IAsyncResult result) {
            bool retVal = ((MiniSAAS.WorkflowServiceReference.IWorkflowService)(this)).EndUpdateMethodSequence(result);
            return new object[] {
                    retVal};
        }
        
        private void OnUpdateMethodSequenceCompleted(object state) {
            if ((this.UpdateMethodSequenceCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateMethodSequenceCompleted(this, new UpdateMethodSequenceCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateMethodSequenceAsync(int methodid, int sequence) {
            this.UpdateMethodSequenceAsync(methodid, sequence, null);
        }
        
        public void UpdateMethodSequenceAsync(int methodid, int sequence, object userState) {
            if ((this.onBeginUpdateMethodSequenceDelegate == null)) {
                this.onBeginUpdateMethodSequenceDelegate = new BeginOperationDelegate(this.OnBeginUpdateMethodSequence);
            }
            if ((this.onEndUpdateMethodSequenceDelegate == null)) {
                this.onEndUpdateMethodSequenceDelegate = new EndOperationDelegate(this.OnEndUpdateMethodSequence);
            }
            if ((this.onUpdateMethodSequenceCompletedDelegate == null)) {
                this.onUpdateMethodSequenceCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateMethodSequenceCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateMethodSequenceDelegate, new object[] {
                        methodid,
                        sequence}, this.onEndUpdateMethodSequenceDelegate, this.onUpdateMethodSequenceCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override MiniSAAS.WorkflowServiceReference.IWorkflowService CreateChannel() {
            return new WorkflowServiceClientChannel(this);
        }
        
        private class WorkflowServiceClientChannel : ChannelBase<MiniSAAS.WorkflowServiceReference.IWorkflowService>, MiniSAAS.WorkflowServiceReference.IWorkflowService {
            
            public WorkflowServiceClientChannel(System.ServiceModel.ClientBase<MiniSAAS.WorkflowServiceReference.IWorkflowService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginLogin(string emailid, string password, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = emailid;
                _args[1] = password;
                System.IAsyncResult _result = base.BeginInvoke("Login", _args, callback, asyncState);
                return _result;
            }
            
            public int EndLogin(System.IAsyncResult result) {
                object[] _args = new object[0];
                int _result = ((int)(base.EndInvoke("Login", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginForgotPassword(string emailid, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = emailid;
                System.IAsyncResult _result = base.BeginInvoke("ForgotPassword", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndForgotPassword(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("ForgotPassword", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginRegister(int orgid, string emailid, string password, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = orgid;
                _args[1] = emailid;
                _args[2] = password;
                System.IAsyncResult _result = base.BeginInvoke("Register", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndRegister(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("Register", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginApplyCoupon(double amount, string couponcode, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = amount;
                _args[1] = couponcode;
                System.IAsyncResult _result = base.BeginInvoke("ApplyCoupon", _args, callback, asyncState);
                return _result;
            }
            
            public double EndApplyCoupon(System.IAsyncResult result) {
                object[] _args = new object[0];
                double _result = ((double)(base.EndInvoke("ApplyCoupon", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginCalculateTax(double amount, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = amount;
                System.IAsyncResult _result = base.BeginInvoke("CalculateTax", _args, callback, asyncState);
                return _result;
            }
            
            public double EndCalculateTax(System.IAsyncResult result) {
                object[] _args = new object[0];
                double _result = ((double)(base.EndInvoke("CalculateTax", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginVerifyCreditCard(string cardnumber, System.DateTime expdate, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = cardnumber;
                _args[1] = expdate;
                System.IAsyncResult _result = base.BeginInvoke("VerifyCreditCard", _args, callback, asyncState);
                return _result;
            }
            
            public string EndVerifyCreditCard(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("VerifyCreditCard", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetShippingVendors(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetShippingVendors", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.Generic.List<string> EndGetShippingVendors(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.Generic.List<string> _result = ((System.Collections.Generic.List<string>)(base.EndInvoke("GetShippingVendors", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginValidateZIP(string zip, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = zip;
                System.IAsyncResult _result = base.BeginInvoke("ValidateZIP", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndValidateZIP(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("ValidateZIP", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginAddToCart(int orgid, string userid, string productid, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = orgid;
                _args[1] = userid;
                _args[2] = productid;
                System.IAsyncResult _result = base.BeginInvoke("AddToCart", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndAddToCart(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("AddToCart", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetCart(int orgid, string userid, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = orgid;
                _args[1] = userid;
                System.IAsyncResult _result = base.BeginInvoke("GetCart", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.Generic.List<string> EndGetCart(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.Generic.List<string> _result = ((System.Collections.Generic.List<string>)(base.EndInvoke("GetCart", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginDeleteCart(int orgid, string userid, System.Collections.Generic.List<string> productids, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = orgid;
                _args[1] = userid;
                _args[2] = productids;
                System.IAsyncResult _result = base.BeginInvoke("DeleteCart", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndDeleteCart(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("DeleteCart", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetWorkflows(int orgid, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = orgid;
                System.IAsyncResult _result = base.BeginInvoke("GetWorkflows", _args, callback, asyncState);
                return _result;
            }
            
            public MiniSAAS.WorkflowServiceReference.WorkflowDescription EndGetWorkflows(System.IAsyncResult result) {
                object[] _args = new object[0];
                MiniSAAS.WorkflowServiceReference.WorkflowDescription _result = ((MiniSAAS.WorkflowServiceReference.WorkflowDescription)(base.EndInvoke("GetWorkflows", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginAddWorkflow(string workflowname, int orgid, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = workflowname;
                _args[1] = orgid;
                System.IAsyncResult _result = base.BeginInvoke("AddWorkflow", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndAddWorkflow(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("AddWorkflow", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginDeleteWorkflow(int orgid, int workflowid, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = orgid;
                _args[1] = workflowid;
                System.IAsyncResult _result = base.BeginInvoke("DeleteWorkflow", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndDeleteWorkflow(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("DeleteWorkflow", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginDeleteMethod(int methodid, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = methodid;
                System.IAsyncResult _result = base.BeginInvoke("DeleteMethod", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndDeleteMethod(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("DeleteMethod", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetURLMethods(string url, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = url;
                System.IAsyncResult _result = base.BeginInvoke("GetURLMethods", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.Generic.List<MiniSAAS.WorkflowServiceReference.Method> EndGetURLMethods(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.Generic.List<MiniSAAS.WorkflowServiceReference.Method> _result = ((System.Collections.Generic.List<MiniSAAS.WorkflowServiceReference.Method>)(base.EndInvoke("GetURLMethods", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginAddMethods(MiniSAAS.WorkflowServiceReference.WorkflowDescription workflowdescription, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = workflowdescription;
                System.IAsyncResult _result = base.BeginInvoke("AddMethods", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndAddMethods(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("AddMethods", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginUpdateMethodSequence(int methodid, int sequence, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = methodid;
                _args[1] = sequence;
                System.IAsyncResult _result = base.BeginInvoke("UpdateMethodSequence", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndUpdateMethodSequence(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("UpdateMethodSequence", _args, result)));
                return _result;
            }
        }
    }
}
